// This File was auto generated by LemmyKitCodeGen and should not be modified.
//
// File: EditSite.swift

import Foundation

public struct EditSite: APIRequest {
	public typealias Response = SiteResponse

	public static let path = "/site"
	public static let httpMethod = HTTPMethod.put

	public var name: String?
	public var sidebar: String?
	public var description: String?
	public var icon: String?
	public var banner: String?
	public var enableDownvotes: Bool?
	public var enableNSFW: Bool?
	public var communityCreationAdminOnly: Bool?
	public var requireEmailVerification: Bool?
	public var applicationQuestion: String?
	public var privateInstance: Bool?
	public var defaultTheme: String?
	public var defaultPostListingType: ListingType?
	public var legalInformation: String?
	public var applicationEmailAdmins: Bool?
	public var hideModlogModNames: Bool?
	public var discussionLanguages: [Int?]
	public var slurFilterRegex: String?
	public var actorNameMaxLength: Int32?
	public var rateLimitMessage: Int32?
	public var rateLimitMessagePerSecond: Int32?
	public var rateLimitPost: Int32?
	public var rateLimitPostPerSecond: Int32?
	public var rateLimitRegister: Int32?
	public var rateLimitRegisterPerSecond: Int32?
	public var rateLimitImage: Int32?
	public var rateLimitImagePerSecond: Int32?
	public var rateLimitComment: Int32?
	public var rateLimitCommentPerSecond: Int32?
	public var rateLimitSearch: Int32?
	public var rateLimitSearchPerSecond: Int32?
	public var federationEnabled: Bool?
	public var federationDebug: Bool?
	public var captchaEnabled: Bool?
	public var captchaDifficulty: String?
	public var allowedInstances: [String?]
	public var blockedInstances: [String?]
	public var taglines: [String?]
	public var registrationMode: RegistrationMode?
	public var reportsEmailAdmins: Bool?
	public var auth: String

	public init(
		name: String? = nil,
		sidebar: String? = nil,
		description: String? = nil,
		icon: String? = nil,
		banner: String? = nil,
		enableDownvotes: Bool? = nil,
		enableNSFW: Bool? = nil,
		communityCreationAdminOnly: Bool? = nil,
		requireEmailVerification: Bool? = nil,
		applicationQuestion: String? = nil,
		privateInstance: Bool? = nil,
		defaultTheme: String? = nil,
		defaultPostListingType: ListingType? = nil,
		legalInformation: String? = nil,
		applicationEmailAdmins: Bool? = nil,
		hideModlogModNames: Bool? = nil,
		discussionLanguages: [Int?],
		slurFilterRegex: String? = nil,
		actorNameMaxLength: Int32? = nil,
		rateLimitMessage: Int32? = nil,
		rateLimitMessagePerSecond: Int32? = nil,
		rateLimitPost: Int32? = nil,
		rateLimitPostPerSecond: Int32? = nil,
		rateLimitRegister: Int32? = nil,
		rateLimitRegisterPerSecond: Int32? = nil,
		rateLimitImage: Int32? = nil,
		rateLimitImagePerSecond: Int32? = nil,
		rateLimitComment: Int32? = nil,
		rateLimitCommentPerSecond: Int32? = nil,
		rateLimitSearch: Int32? = nil,
		rateLimitSearchPerSecond: Int32? = nil,
		federationEnabled: Bool? = nil,
		federationDebug: Bool? = nil,
		captchaEnabled: Bool? = nil,
		captchaDifficulty: String? = nil,
		allowedInstances: [String?],
		blockedInstances: [String?],
		taglines: [String?],
		registrationMode: RegistrationMode? = nil,
		reportsEmailAdmins: Bool? = nil,
		auth: String
	) {
		self.name = name
		self.sidebar = sidebar
		self.description = description
		self.icon = icon
		self.banner = banner
		self.enableDownvotes = enableDownvotes
		self.enableNSFW = enableNSFW
		self.communityCreationAdminOnly = communityCreationAdminOnly
		self.requireEmailVerification = requireEmailVerification
		self.applicationQuestion = applicationQuestion
		self.privateInstance = privateInstance
		self.defaultTheme = defaultTheme
		self.defaultPostListingType = defaultPostListingType
		self.legalInformation = legalInformation
		self.applicationEmailAdmins = applicationEmailAdmins
		self.hideModlogModNames = hideModlogModNames
		self.discussionLanguages = discussionLanguages
		self.slurFilterRegex = slurFilterRegex
		self.actorNameMaxLength = actorNameMaxLength
		self.rateLimitMessage = rateLimitMessage
		self.rateLimitMessagePerSecond = rateLimitMessagePerSecond
		self.rateLimitPost = rateLimitPost
		self.rateLimitPostPerSecond = rateLimitPostPerSecond
		self.rateLimitRegister = rateLimitRegister
		self.rateLimitRegisterPerSecond = rateLimitRegisterPerSecond
		self.rateLimitImage = rateLimitImage
		self.rateLimitImagePerSecond = rateLimitImagePerSecond
		self.rateLimitComment = rateLimitComment
		self.rateLimitCommentPerSecond = rateLimitCommentPerSecond
		self.rateLimitSearch = rateLimitSearch
		self.rateLimitSearchPerSecond = rateLimitSearchPerSecond
		self.federationEnabled = federationEnabled
		self.federationDebug = federationDebug
		self.captchaEnabled = captchaEnabled
		self.captchaDifficulty = captchaDifficulty
		self.allowedInstances = allowedInstances
		self.blockedInstances = blockedInstances
		self.taglines = taglines
		self.registrationMode = registrationMode
		self.reportsEmailAdmins = reportsEmailAdmins
		self.auth = auth
	}

	public enum CodingKeys: String, CodingKey {
		case name
		case sidebar
		case description
		case icon
		case banner
		case enableDownvotes = "enable_downvotes"
		case enableNSFW = "enable_nsfw"
		case communityCreationAdminOnly = "community_creation_admin_only"
		case requireEmailVerification = "require_email_verification"
		case applicationQuestion = "application_question"
		case privateInstance = "private_instance"
		case defaultTheme = "default_theme"
		case defaultPostListingType = "default_post_listing_type"
		case legalInformation = "legal_information"
		case applicationEmailAdmins = "application_email_admins"
		case hideModlogModNames = "hide_modlog_mod_names"
		case discussionLanguages = "discussion_languages"
		case slurFilterRegex = "slur_filter_regex"
		case actorNameMaxLength = "actor_name_max_length"
		case rateLimitMessage = "rate_limit_message"
		case rateLimitMessagePerSecond = "rate_limit_message_per_second"
		case rateLimitPost = "rate_limit_post"
		case rateLimitPostPerSecond = "rate_limit_post_per_second"
		case rateLimitRegister = "rate_limit_register"
		case rateLimitRegisterPerSecond = "rate_limit_register_per_second"
		case rateLimitImage = "rate_limit_image"
		case rateLimitImagePerSecond = "rate_limit_image_per_second"
		case rateLimitComment = "rate_limit_comment"
		case rateLimitCommentPerSecond = "rate_limit_comment_per_second"
		case rateLimitSearch = "rate_limit_search"
		case rateLimitSearchPerSecond = "rate_limit_search_per_second"
		case federationEnabled = "federation_enabled"
		case federationDebug = "federation_debug"
		case captchaEnabled = "captcha_enabled"
		case captchaDifficulty = "captcha_difficulty"
		case allowedInstances = "allowed_instances"
		case blockedInstances = "blocked_instances"
		case taglines
		case registrationMode = "registration_mode"
		case reportsEmailAdmins = "reports_email_admins"
		case auth
	}
}

public extension LemmyInstance {
	func editSite(
		name: String? = nil,
		sidebar: String? = nil,
		description: String? = nil,
		icon: String? = nil,
		banner: String? = nil,
		enableDownvotes: Bool? = nil,
		enableNSFW: Bool? = nil,
		communityCreationAdminOnly: Bool? = nil,
		requireEmailVerification: Bool? = nil,
		applicationQuestion: String? = nil,
		privateInstance: Bool? = nil,
		defaultTheme: String? = nil,
		defaultPostListingType: ListingType? = nil,
		legalInformation: String? = nil,
		applicationEmailAdmins: Bool? = nil,
		hideModlogModNames: Bool? = nil,
		discussionLanguages: [Int?],
		slurFilterRegex: String? = nil,
		actorNameMaxLength: Int32? = nil,
		rateLimitMessage: Int32? = nil,
		rateLimitMessagePerSecond: Int32? = nil,
		rateLimitPost: Int32? = nil,
		rateLimitPostPerSecond: Int32? = nil,
		rateLimitRegister: Int32? = nil,
		rateLimitRegisterPerSecond: Int32? = nil,
		rateLimitImage: Int32? = nil,
		rateLimitImagePerSecond: Int32? = nil,
		rateLimitComment: Int32? = nil,
		rateLimitCommentPerSecond: Int32? = nil,
		rateLimitSearch: Int32? = nil,
		rateLimitSearchPerSecond: Int32? = nil,
		federationEnabled: Bool? = nil,
		federationDebug: Bool? = nil,
		captchaEnabled: Bool? = nil,
		captchaDifficulty: String? = nil,
		allowedInstances: [String?],
		blockedInstances: [String?],
		taglines: [String?],
		registrationMode: RegistrationMode? = nil,
		reportsEmailAdmins: Bool? = nil,
		auth: String
	) async throws -> EditSite.Response {
		try await request(EditSite(
			name: name,
			sidebar: sidebar,
			description: description,
			icon: icon,
			banner: banner,
			enableDownvotes: enableDownvotes,
			enableNSFW: enableNSFW,
			communityCreationAdminOnly: communityCreationAdminOnly,
			requireEmailVerification: requireEmailVerification,
			applicationQuestion: applicationQuestion,
			privateInstance: privateInstance,
			defaultTheme: defaultTheme,
			defaultPostListingType: defaultPostListingType,
			legalInformation: legalInformation,
			applicationEmailAdmins: applicationEmailAdmins,
			hideModlogModNames: hideModlogModNames,
			discussionLanguages: discussionLanguages,
			slurFilterRegex: slurFilterRegex,
			actorNameMaxLength: actorNameMaxLength,
			rateLimitMessage: rateLimitMessage,
			rateLimitMessagePerSecond: rateLimitMessagePerSecond,
			rateLimitPost: rateLimitPost,
			rateLimitPostPerSecond: rateLimitPostPerSecond,
			rateLimitRegister: rateLimitRegister,
			rateLimitRegisterPerSecond: rateLimitRegisterPerSecond,
			rateLimitImage: rateLimitImage,
			rateLimitImagePerSecond: rateLimitImagePerSecond,
			rateLimitComment: rateLimitComment,
			rateLimitCommentPerSecond: rateLimitCommentPerSecond,
			rateLimitSearch: rateLimitSearch,
			rateLimitSearchPerSecond: rateLimitSearchPerSecond,
			federationEnabled: federationEnabled,
			federationDebug: federationDebug,
			captchaEnabled: captchaEnabled,
			captchaDifficulty: captchaDifficulty,
			allowedInstances: allowedInstances,
			blockedInstances: blockedInstances,
			taglines: taglines,
			registrationMode: registrationMode,
			reportsEmailAdmins: reportsEmailAdmins,
			auth: auth
		))
	}
}
