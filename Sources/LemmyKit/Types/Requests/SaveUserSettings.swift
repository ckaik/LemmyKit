// This File was auto generated by LemmyKitCodeGen and should not be modified.
//
// File: SaveUserSettings.swift

import Foundation

public struct SaveUserSettings: APIRequest {
	public typealias Response = LoginResponse

	public static let path = "/user/save_user_settings"
	public static let httpMethod = HTTPMethod.put

	public var showNSFW: Bool?
	public var showScores: Bool?
	public var theme: String?
	public var defaultSortType: SortType?
	public var defaultListingType: ListingType?
	public var interfaceLanguage: String?
	public var avatar: String?
	public var banner: String?
	public var displayName: String?
	public var email: String?
	public var bio: String?
	public var matrixUserId: String?
	public var showAvatars: Bool?
	public var sendNotificationsToEmail: Bool?
	public var botAccount: Bool?
	public var showBotAccounts: Bool?
	public var showReadPosts: Bool?
	public var showNewPostNotifs: Bool?
	public var discussionLanguages: [Int?]
	public var generateTotp2fa: Bool?
	public var auth: String

	public init(
		showNSFW: Bool? = nil,
		showScores: Bool? = nil,
		theme: String? = nil,
		defaultSortType: SortType? = nil,
		defaultListingType: ListingType? = nil,
		interfaceLanguage: String? = nil,
		avatar: String? = nil,
		banner: String? = nil,
		displayName: String? = nil,
		email: String? = nil,
		bio: String? = nil,
		matrixUserId: String? = nil,
		showAvatars: Bool? = nil,
		sendNotificationsToEmail: Bool? = nil,
		botAccount: Bool? = nil,
		showBotAccounts: Bool? = nil,
		showReadPosts: Bool? = nil,
		showNewPostNotifs: Bool? = nil,
		discussionLanguages: [Int?],
		generateTotp2fa: Bool? = nil,
		auth: String
	) {
		self.showNSFW = showNSFW
		self.showScores = showScores
		self.theme = theme
		self.defaultSortType = defaultSortType
		self.defaultListingType = defaultListingType
		self.interfaceLanguage = interfaceLanguage
		self.avatar = avatar
		self.banner = banner
		self.displayName = displayName
		self.email = email
		self.bio = bio
		self.matrixUserId = matrixUserId
		self.showAvatars = showAvatars
		self.sendNotificationsToEmail = sendNotificationsToEmail
		self.botAccount = botAccount
		self.showBotAccounts = showBotAccounts
		self.showReadPosts = showReadPosts
		self.showNewPostNotifs = showNewPostNotifs
		self.discussionLanguages = discussionLanguages
		self.generateTotp2fa = generateTotp2fa
		self.auth = auth
	}

	public enum CodingKeys: String, CodingKey {
		case showNSFW = "show_nsfw"
		case showScores = "show_scores"
		case theme
		case defaultSortType = "default_sort_type"
		case defaultListingType = "default_listing_type"
		case interfaceLanguage = "interface_language"
		case avatar
		case banner
		case displayName = "display_name"
		case email
		case bio
		case matrixUserId = "matrix_user_id"
		case showAvatars = "show_avatars"
		case sendNotificationsToEmail = "send_notifications_to_email"
		case botAccount = "bot_account"
		case showBotAccounts = "show_bot_accounts"
		case showReadPosts = "show_read_posts"
		case showNewPostNotifs = "show_new_post_notifs"
		case discussionLanguages = "discussion_languages"
		case generateTotp2fa = "generate_totp_2fa"
		case auth
	}
}

public extension LemmyInstance {
	func saveUserSettings(
		showNSFW: Bool? = nil,
		showScores: Bool? = nil,
		theme: String? = nil,
		defaultSortType: SortType? = nil,
		defaultListingType: ListingType? = nil,
		interfaceLanguage: String? = nil,
		avatar: String? = nil,
		banner: String? = nil,
		displayName: String? = nil,
		email: String? = nil,
		bio: String? = nil,
		matrixUserId: String? = nil,
		showAvatars: Bool? = nil,
		sendNotificationsToEmail: Bool? = nil,
		botAccount: Bool? = nil,
		showBotAccounts: Bool? = nil,
		showReadPosts: Bool? = nil,
		showNewPostNotifs: Bool? = nil,
		discussionLanguages: [Int?],
		generateTotp2fa: Bool? = nil,
		auth: String
	) async throws -> SaveUserSettings.Response {
		try await request(SaveUserSettings(
			showNSFW: showNSFW,
			showScores: showScores,
			theme: theme,
			defaultSortType: defaultSortType,
			defaultListingType: defaultListingType,
			interfaceLanguage: interfaceLanguage,
			avatar: avatar,
			banner: banner,
			displayName: displayName,
			email: email,
			bio: bio,
			matrixUserId: matrixUserId,
			showAvatars: showAvatars,
			sendNotificationsToEmail: sendNotificationsToEmail,
			botAccount: botAccount,
			showBotAccounts: showBotAccounts,
			showReadPosts: showReadPosts,
			showNewPostNotifs: showNewPostNotifs,
			discussionLanguages: discussionLanguages,
			generateTotp2fa: generateTotp2fa,
			auth: auth
		))
	}
}
